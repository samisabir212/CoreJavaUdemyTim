Collection of framework
interfaces
collection of polymorphic algorithms
reusable functionality

Collection —
    the root of the collection hierarchy.
    A collection represents a group of objects known as its elements.


Set -
    a collection that cannot contain duplicate elements
     This interface models the mathematical set abstraction and is used to represent sets,
      such as the cards comprising a poker hand,
     the courses making up a student's schedule,
     or the processes running on a machine.

List —
    an ordered collection (sometimes called a sequence).
    Lists can contain duplicate elements.
    The user of a List generally has precise control over where
     in the list each element is inserted and can access
     elements by their integer index (position).

Queue —
    a collection used to hold multiple elements prior to processing.
    Besides basic Collection operations, a Queue provides additional insertion,
    extraction, and inspection operations.

Deque — a collection used to hold multiple elements prior to processing.
Besides basic Collection operations,
a Deque provides additional insertion, extraction, and
 inspection operations.

    Map —
    an object that maps keys to values.
    A Map cannot contain duplicate keys; each key can map to at most one value.
    If you've used Hashtable, you're already familiar with the basics of Map.


    SortedSet — a Set that maintains its elements in ascending order.
    Several additional operations are provided to take advantage
    of the ordering. Sorted sets are used for naturally ordered sets,
    such as word lists and membership rolls.
     Also see The SortedSet Interface section.


    SortedMap — a Map that maintains its mappings in ascending key order.
    This is the Map analog of SortedSet.
     Sorted maps are used for naturally ordered collections of key/value pairs,
     such as dictionaries and telephone directories.